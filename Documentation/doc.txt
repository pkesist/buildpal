-----------
DistriBuild
-----------

(1.) Motivation.
(2.) Features.
(3.) Requirements.
(4.) Quick-start.
(5.) Design.

--------------------------------------------------------------------------------
----------------
(1.) Motivation.
----------------

    DistriBuild is a tool which speeds up compilation of large C/C++ projects.
    It works by distributing parts of compilation process to other machines on
    the network (i.e. the build farm).
    
    It is inspired by the distcc project. However, DistriBuild's main focus is
    on the Microsoft Visual C compiler.

--------------------------------------------------------------------------------
--------------
(2.) Features.
--------------

    Task rejection with resource monitoring.
        Server may reject task if it doesn't have enough resources. In this
        case the client will try another farm node. This allows you to run a lot
        of parallel tasks without the danger of suffocating the build farm or
        the local machine. If you plan on running many paralell tasks consider
        turning on the LAZY_PREPROCESS option.

    Build consistency.
        DistriBuild takes special care that exact same compiler is used both on
        the client and on the server.
        DistriBuild takes special care to preserve compilation environment, so
        that task distribution does not affect the produced objects.
        
    COMPILE_LOCALLY ...
    LAZY_PREPROCESS ...

--------------------------------------------------------------------------------
------------------
(4.) Requirements.
------------------

    DistriBuild is written in Python. All machines need to have pyton installed.
    DistriBuild works only with Python 3. Python 2 is not, was not and probably
    never will be supported.
    
    An additional Python package, psutil, is optional but recommended to utilize
    task rejection.

--------------------------------------------------------------------------------
-----------------
(3.) Quick-start.
-----------------

    ------------------
    Set up build farm.
    ------------------
    
    Place scripts on each of the farm machines. Compilers should already be
    installed. Set hostname and port. Run distribute_server.py.
    
    ----------------------
    Set up client manager.
    ----------------------

    On the client machine you need to set up a manager. Manager keeps track of
    build process global data. It is the entity which contains all information
    about the farm.

    Setup farm nodes in manager.

    Run distribute_manager.py with an additional parameter which denotes manager
    id. You can have multiple managers on the same machine.

    The build environment is now set. Now you need to call the compiler.

    ---------------------
    Calling the compiler.
    ---------------------

    Instead of calling cl.exe you need to call distribute_client.py <manager_id>
    cl.exe.
    
--------------------------------------------------------------------------------
