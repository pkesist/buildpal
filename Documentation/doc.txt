-----------
DistriBuild
-----------

(1.) Motivation.
(2.) Features.
(3.) Requirements.
(4.) Quick-start.
(5.) Design.
(6.) Future development plans.

--------------------------------------------------------------------------------
----------------
(1.) Motivation.
----------------

    DistriBuild is a tool which speeds up build of large C/C++ projects.
    It works by distributing parts of compilation process to other machines on
    the network (i.e. the build farm).
    
    It is inspired by the distcc project. However, DistriBuild's goal is to
    support different platforms and compilers, especially MS VC compiler.

--------------------------------------------------------------------------------
--------------
(2.) Features.
--------------

    Task rejection.
        Server may reject task if it doesn't have enough resources. In this
        case the client will try another farm node. This allows you to run a lot
        of parallel tasks without the danger of suffocating the build farm or
        the local machine. If you plan on running many paralell tasks consider
        turning on the LAZY_PREPROCESS option.

    Build consistency.
        DistriBuild takes special care that exact same compiler is used both on
        the client and on the server. (more correctly - will soon ;)
        DistriBuild takes special care to preserve compilation environment, so
        that task distribution does not affect the produced objects.
        (more correctly - will soon ;)
        
    PCH support.
    Pump-mode.

    Free.
        DistriBuild is open-source, free and has a permissive license.

    ALLOW_LOCAL_COMPILATION ...
    LAZY_PREPROCESS ...

--------------------------------------------------------------------------------
------------------
(3.) Requirements.
------------------

    DistriBuild is written in Python (www.python.org). All machines need to have
    Pyhton installed. DistriBuild works only with Python 3.3+.

    Compiler needs to be installed on all machines on the network.

--------------------------------------------------------------------------------
-----------------
(4.) Quick-start.
-----------------

    ----------------------
    Set up the build farm.
    ----------------------
    
    Place scripts on each of the farm machines. Compilers should already be
    installed. Set hostname and port. Run distribute_server.py.
    
    ----------------------
    Set up client manager.
    ----------------------

    On the client machine you need to set up a manager. Manager keeps track of
    build process global data. It is the entity which contains all information
    about the farm.

    Setup farm nodes in manager.

    Run distribute_manager.py with an additional parameter which denotes manager
    id. You can have multiple managers on the same machine.

    The build environment is now set. Now you need to call the compiler.

    ---------------------
    Calling the compiler.
    ---------------------

    Instead of calling 'cl.exe' you need to call 'msvc.py <manager_id>'. Your
    environment should already be configured - msvc.py will try to locate
    the compiler executable on PATH.
    
--------------------------------------------------------------------------------
------------
(5.) Design.
------------

    * In progress.

--------------------------------------------------------------------------------
------------------------------
(6.) Future development plans.
------------------------------

    * Support more platforms (Linux) and compilers (GCC/Clang).

--------------------------------------------------------------------------------
