import project ;

path-constant COMMON : ../../Extensions/Common ;
path-constant CLIENT : ../../Extensions/Client ;

local rule get-jam-var ( variable-name )
{
    local result = [ modules.peek : $(variable-name) ] ;
    if ! $(result)
    {
        import errors ;
        errors.user-error $(variable-name) must be defined. ;
    }
    else
    {
        return $(result) ;
    }
}

local BOOST_PATH = [ get-jam-var BOOST_PATH ] ;
local BOOST_LIBS = [ get-jam-var BOOST_LIBS ] ;
local CLANG_SRC_ROOT = [ get-jam-var CLANG_SRC_ROOT ] ;
local CLANG_BUILD_ROOT_X86 = [ get-jam-var CLANG_BUILD_ROOT_X86 ] ;
local CLANG_BUILD_ROOT_X64 = [ get-jam-var CLANG_BUILD_ROOT_X64 ] ;
local TARGET_DIR = [ get-jam-var TARGET_DIR ] ;
local TMP_INCLUDE_DIR = [ get-jam-var TMP_INCLUDE_DIR ] ;
local BUILD_DIR = [ get-jam-var BUILD_DIR ] ;

for lib in $(BOOST_LIBS)
{
    lib boost_$(lib) : : <search>$(BOOST_PATH)/lib ;
    lib boost_$(lib) : : <search>$(BOOST_PATH)/lib <address-model>32 ;
    lib boost_$(lib) : : <search>$(BOOST_PATH)/x64/lib <address-model>64 ;
}

project client : build-dir $(BUILD_DIR) ;

alias library-path : :                   <toolset>msvc : : <library-path>$(BOOST_PATH)/lib ;
alias library-path : : <address-model>32 <toolset>msvc : : <library-path>$(BOOST_PATH)/lib ;
alias library-path : : <address-model>64 <toolset>msvc : : <library-path>$(BOOST_PATH)/x64/lib ;

alias boost-stuff
:
    library-path
:
:
:
    <define>BOOST_ASIO_DISABLE_BOOST_REGEX
    <define>BOOST_ASIO_DISABLE_BOOST_DATE_TIME

    <toolset>gcc:<library>boost_$(BOOST_LIBS)

    <include>$(BOOST_PATH)
;

local rel-paths = include tools/clang/include ;
local dirs32 = $(CLANG_SRC_ROOT)/ $(CLANG_BUILD_ROOT_X86)/ ;
local dirs64 = $(CLANG_SRC_ROOT)/ $(CLANG_BUILD_ROOT_X64)/ ;
local include-dirs-32 = $(dirs32)$(rel-paths) ;
local include-dirs-64 = $(dirs64)$(rel-paths) ;

lib shlwapi ;
lib advapi32 ;
lib LLVMSupport : :                   <search>$(CLANG_BUILD_ROOT_X86)/lib ;
lib LLVMSupport : : <address-model>32 <search>$(CLANG_BUILD_ROOT_X86)/lib ;
lib LLVMSupport : : <address-model>64 <search>$(CLANG_BUILD_ROOT_X64)/lib ;
alias clang-stuff : LLVMSupport :                    : : <include>$(include-dirs-32) ;
alias clang-stuff : LLVMSupport :  <address-model>32 : : <include>$(include-dirs-32) ;
alias clang-stuff : LLVMSupport :  <address-model>64 : : <include>$(include-dirs-64) ;

local release-variants = release profile ;

exe bp_cl
:
    bp_cl.cpp
    $(CLIENT)/client.cpp
    boost-stuff
    clang-stuff
:
    <link>static
    <threading>multi

    # Windows settings.
    <target-os>windows:<define>_WIN32_WINNT=0x0501

    # MSVC settings
    <toolset>msvc,<optimization>speed:<cxxflags>"/Ox /GF /GL /GS /GT /GR /WL"
    <toolset>msvc,<optimization>speed:<linkflags>"/OPT:REF /OPT:ICF /LTCG /STACK:64"
    <toolset>msvc:<library>shlwapi

    # General GCC settings
    <toolset>gcc:<cxxflags>-std=c++11
    <toolset>gcc:<linkflags>-Wl,--strip-all
    <toolset>gcc:<warnings>off

    # MinGW settings
    <toolset>gcc,<target-os>windows:<find-shared-library>ws2_32
    <toolset>gcc,<target-os>windows:<find-shared-library>shlwapi
    <toolset>gcc,<target-os>windows:<find-shared-library>imagehlp
;
explicit bp_cl ;

alias bp_cli_inj
:
    $(COMMON)/dllInject.cpp
    $(CLIENT)/client.cpp
    hookProcess.cpp
    boost-stuff
    clang-stuff
:
:
:
    <target-os>windows:<define>_WIN32_WINNT=0x0501
    # MSVC settings
    <toolset>msvc,<optimization>speed:<cxxflags>"/Ox /GF /GL /GS /GT /GR /WL"
    <toolset>msvc,<optimization>speed:<linkflags>"/OPT:REF /OPT:ICF /LTCG"
    <toolset>msvc:<library>shlwapi
    <include>$(MAP_FILES)
    <include>$(TMP_INCLUDE_DIR)
;

lib bp_cli_inj32 : bp_cli_inj : <address-model>32 <def-file>hookProcess.def ;
lib bp_cli_inj64 : bp_cli_inj : <address-model>64 <def-file>hookProcess.def ;

alias select_inject_module : bp_cli_inj32 ;
alias select_inject_module : bp_cli_inj32 : <address-model>32 ;
alias select_inject_module : bp_cli_inj64 : <address-model>64 ;

install _
:   bp_cl
    bp_cli_inj32
    bp_cli_inj64
:   <location>$(TARGET_DIR)
    <install-type>EXE
    <install-type>IMPORT_LIB
    <install-type>SHARED_LIB
;
